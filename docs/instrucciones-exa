A continuación tienes una guía completa para integrar **Exa MCP** como alternativa en tu herramienta, basándote en la documentación oficial y el repositorio de GitHub.

---

En esta guía aprenderás:

1. **Qué es Exa MCP** y por qué usarlo.
2. **Cómo acceder al servidor remoto** de Exa MCP.
3. **Instalación local** del servidor Exa MCP.
4. **Configuración MCP** (list\_tools e invoke).
5. **Herramientas disponibles** y ejemplos de uso.
6. **Integración en tu ChatService**.

Cada punto incluye referencias a la documentación y al repositorio oficial.

---

## 1. ¿Qué es Exa MCP y por qué usarlo?

Exa MCP Server es un **MCP Server** (Model Context Protocol) que permite a asistentes de IA (por ejemplo, Claude) realizar búsquedas web en tiempo real usando la **Exa Search API** ([Exa][1]).
Su ventaja principal es que ofrece un **estándar seguro y estructurado** para que un LLM descubra e invoque herramientas externas sin escribir lógica ad-hoc de scraping o llamadas HTTP directas ([GitHub][2]).
Es **open-source**, mantenido por Exa Labs, y cuenta con un mirror en GitHub con instrucciones detalladas de instalación y configuración ([GitHub][2], [GitHub][3]).

---

## 2. Conexión al servidor remoto de Exa MCP

### URL remota

Exa ofrece un servidor MCP hosted al que puedes conectarte directamente sin instalar nada localmente:

```
wss://mcp.exa.ai/mcp?exaApiKey=YOUR_EXA_API_KEY
```

Obtén tu API key en dashboard.exa.ai/api-keys ([Exa][1]).

### Configuración ejemplo (Claude Desktop)

En tu archivo de configuración de Claude Desktop (ej. `claude_desktop_config.json`), añade:

```json
{
  "mcpServers": {
    "exa": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-remote",
        "https://mcp.exa.ai/mcp?exaApiKey=YOUR_EXA_API_KEY"
      ]
    }
  }
}
```

Este bloque configura un cliente MCP que invoca el servidor remoto de Exa ([Exa][1]).

---

## 3. Instalación local del servidor Exa MCP

Si prefieres correr tu propia instancia:

1. **Instala el paquete NPM**:

   ```bash
   npm install -g exa-mcp-server
   ```

   Esto instala el binario `exa-mcp-server` globalmente ([GitHub][2]).

2. **O ejecuta con npx**:

   ```bash
   npx exa-mcp-server
   ```

   Esto arranca un servidor MCP por STDIO que escucha peticiones ([GitHub][4]).

3. **Opciones de flags**:

   * `--sse`: expone un endpoint HTTP/SSE en vez de STDIO.
   * `--tools=...`: habilita solo ciertas herramientas, p.ej. `--tools=web_search_exa,company_research` ([Exa][1]).

---

## 4. Protocolo MCP: descubrimiento e invocación

### a) **list\_tools**

Al conectar (WebSocket o STDIO), envía:

```json
{
  "protocol": "mcp",
  "version": 1,
  "action": "list_tools"
}
```

El servidor responde con un array:

````json
[
  {
    "tool_name": "web_search_exa",
    "description": "Performs real-time web searches…",
    "input_schema": { /* JSON Schema */ }
  },
  …  
]
``` :contentReference[oaicite:8]{index=8}.

### b) **invoke**  

Cuando el modelo quiera usar una herramienta:
```json
{
  "protocol": "mcp",
  "version": 1,
  "action": "invoke",
  "tool_name": "search_paper",
  "arguments": { "query": "climate change 2025", "limit": 5 }
}
````

Y recibes:

````json
{
  "protocol": "mcp",
  "version": 1,
  "status": "success",
  "tool_name": "search_paper",
  "results": [ /* array de resultados */ ]
}
``` :contentReference[oaicite:9]{index=9}.

---

## 5. Herramientas disponibles en Exa MCP  

| Tool Name               | Función                                                                           |
|-------------------------|-----------------------------------------------------------------------------------|
| `web_search_exa`        | Búsqueda web genérica con extracción de contenido optimizada :contentReference[oaicite:10]{index=10} |
| `research_paper_search` | Búsqueda especializada en papers académicos :contentReference[oaicite:11]{index=11}                 |
| `company_research`      | Rastrea webs corporativas para información de empresas :contentReference[oaicite:12]{index=12}      |
| `crawling`              | Extrae contenido HTML/PDF de URLs exactas :contentReference[oaicite:13]{index=13}                   |
| `competitor_finder`     | Identifica competidores de una empresa dada :contentReference[oaicite:14]{index=14}                 |
| `linkedin_search`       | Busca perfiles o empresas en LinkedIn :contentReference[oaicite:15]{index=15}                       |
| `wikipedia_search_exa`  | Recupera información de Wikipedia :contentReference[oaicite:16]{index=16}                           |
| `github_search`         | Busca repositorios, issues y cuentas en GitHub :contentReference[oaicite:17]{index=17}              |

---

## 6. Ejemplos de uso

- **Investigar artículos científicos**  
  > “Find and analyze recent research papers about climate change solutions” :contentReference[oaicite:18]{index=18}  

- **Análisis de empresas**  
  > “Research the company exa.ai and find information about their pricing” :contentReference[oaicite:19]{index=19}  

- **Detección de competidores**  
  > “Find competitors for a company that provides web search API services” :contentReference[oaicite:20]{index=20}  

---

## 7. Integración en tu `ChatService`

1. **Conexión**  
   - Al iniciar tu servicio de chat, abre un **WebSocket** o STDIO al servidor Exa MCP.
2. **Descubrimiento**  
   - Envía `list_tools` y cachea la lista de herramientas (con sus `input_schema`).
3. **Interceptación de respuestas**  
   - Detecta en la respuesta de la Responses API (Agents SDK) un `tool_call`.
4. **Invocación**  
   - Envía el payload `invoke` al servidor MCP y espera el resultado.
5. **Inyección**  
   - Añade los resultados al contexto del siguiente prompt que envías a OpenAI.

Con esta integración, tu chat podrá usar **todas las herramientas** de Exa MCP de forma nativa, sin implementaciones ad-hoc ni scraping manual.
::contentReference[oaicite:21]{index=21}
````

[1]: https://docs.exa.ai/examples/exa-mcp?utm_source=chatgpt.com "Exa MCP"
[2]: https://github.com/exa-labs/exa-mcp-server?utm_source=chatgpt.com "exa-labs/exa-mcp-server: Claude can perform Web Search - GitHub"
[3]: https://github.com/MCP-Mirror/exa-labs_exa-mcp-server?utm_source=chatgpt.com "MCP-Mirror/exa-labs_exa-mcp-server: Mirror of https ... - GitHub"
[4]: https://github.com/egoist/exa-mcp?utm_source=chatgpt.com "egoist/exa-mcp: MCP server for Exa Search API. - GitHub"
